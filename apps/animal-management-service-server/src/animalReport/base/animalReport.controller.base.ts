/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnimalReportService } from "../animalReport.service";
import { AnimalReportCreateInput } from "./AnimalReportCreateInput";
import { AnimalReport } from "./AnimalReport";
import { AnimalReportFindManyArgs } from "./AnimalReportFindManyArgs";
import { AnimalReportWhereUniqueInput } from "./AnimalReportWhereUniqueInput";
import { AnimalReportUpdateInput } from "./AnimalReportUpdateInput";

export class AnimalReportControllerBase {
  constructor(protected readonly service: AnimalReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnimalReport })
  async createAnimalReport(
    @common.Body() data: AnimalReportCreateInput
  ): Promise<AnimalReport> {
    return await this.service.createAnimalReport({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        location: true,
        status: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnimalReport] })
  @ApiNestedQuery(AnimalReportFindManyArgs)
  async animalReports(@common.Req() request: Request): Promise<AnimalReport[]> {
    const args = plainToClass(AnimalReportFindManyArgs, request.query);
    return this.service.animalReports({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        location: true,
        status: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnimalReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async animalReport(
    @common.Param() params: AnimalReportWhereUniqueInput
  ): Promise<AnimalReport | null> {
    const result = await this.service.animalReport({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        location: true,
        status: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnimalReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnimalReport(
    @common.Param() params: AnimalReportWhereUniqueInput,
    @common.Body() data: AnimalReportUpdateInput
  ): Promise<AnimalReport | null> {
    try {
      return await this.service.updateAnimalReport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          location: true,
          status: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnimalReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnimalReport(
    @common.Param() params: AnimalReportWhereUniqueInput
  ): Promise<AnimalReport | null> {
    try {
      return await this.service.deleteAnimalReport({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          location: true,
          status: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
