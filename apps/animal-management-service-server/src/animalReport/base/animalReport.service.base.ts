/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnimalReport as PrismaAnimalReport } from "@prisma/client";

export class AnimalReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnimalReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.animalReport.count(args);
  }

  async animalReports(
    args: Prisma.AnimalReportFindManyArgs
  ): Promise<PrismaAnimalReport[]> {
    return this.prisma.animalReport.findMany(args);
  }
  async animalReport(
    args: Prisma.AnimalReportFindUniqueArgs
  ): Promise<PrismaAnimalReport | null> {
    return this.prisma.animalReport.findUnique(args);
  }
  async createAnimalReport(
    args: Prisma.AnimalReportCreateArgs
  ): Promise<PrismaAnimalReport> {
    return this.prisma.animalReport.create(args);
  }
  async updateAnimalReport(
    args: Prisma.AnimalReportUpdateArgs
  ): Promise<PrismaAnimalReport> {
    return this.prisma.animalReport.update(args);
  }
  async deleteAnimalReport(
    args: Prisma.AnimalReportDeleteArgs
  ): Promise<PrismaAnimalReport> {
    return this.prisma.animalReport.delete(args);
  }
}
