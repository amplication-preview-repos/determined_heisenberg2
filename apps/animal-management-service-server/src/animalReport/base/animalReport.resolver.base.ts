/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AnimalReport } from "./AnimalReport";
import { AnimalReportCountArgs } from "./AnimalReportCountArgs";
import { AnimalReportFindManyArgs } from "./AnimalReportFindManyArgs";
import { AnimalReportFindUniqueArgs } from "./AnimalReportFindUniqueArgs";
import { CreateAnimalReportArgs } from "./CreateAnimalReportArgs";
import { UpdateAnimalReportArgs } from "./UpdateAnimalReportArgs";
import { DeleteAnimalReportArgs } from "./DeleteAnimalReportArgs";
import { AnimalReportService } from "../animalReport.service";
@graphql.Resolver(() => AnimalReport)
export class AnimalReportResolverBase {
  constructor(protected readonly service: AnimalReportService) {}

  async _animalReportsMeta(
    @graphql.Args() args: AnimalReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AnimalReport])
  async animalReports(
    @graphql.Args() args: AnimalReportFindManyArgs
  ): Promise<AnimalReport[]> {
    return this.service.animalReports(args);
  }

  @graphql.Query(() => AnimalReport, { nullable: true })
  async animalReport(
    @graphql.Args() args: AnimalReportFindUniqueArgs
  ): Promise<AnimalReport | null> {
    const result = await this.service.animalReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnimalReport)
  async createAnimalReport(
    @graphql.Args() args: CreateAnimalReportArgs
  ): Promise<AnimalReport> {
    return await this.service.createAnimalReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AnimalReport)
  async updateAnimalReport(
    @graphql.Args() args: UpdateAnimalReportArgs
  ): Promise<AnimalReport | null> {
    try {
      return await this.service.updateAnimalReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AnimalReport)
  async deleteAnimalReport(
    @graphql.Args() args: DeleteAnimalReportArgs
  ): Promise<AnimalReport | null> {
    try {
      return await this.service.deleteAnimalReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
